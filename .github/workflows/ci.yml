name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Type checking with mypy
      run: |
        mypy src/sclu --ignore-missing-imports
        
    - name: Check code formatting with black
      run: |
        black --check --diff src/ tests/
        
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/ tests/
        
    - name: Security check with bandit
      run: |
        bandit -r src/
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src/sclu --cov-report=xml
        
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov=src/sclu --cov-append --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Run comprehensive linting
      run: |
        # Comprehensive flake8 with plugins
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Check documentation
      run: |
        # Check that all public functions have docstrings
        python -c "
        import ast
        import sys
        from pathlib import Path
        
        def check_docstrings(file_path):
            with open(file_path) as f:
                tree = ast.parse(f.read())
            
            for node in ast.walk(tree):
                if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef)):
                    if not node.name.startswith('_'):  # Public function/class
                        if not ast.get_docstring(node):
                            print(f'Missing docstring: {file_path}:{node.lineno} {node.name}')
                            return False
            return True
        
        all_good = True
        for py_file in Path('src').rglob('*.py'):
            if not check_docstrings(py_file):
                all_good = False
        
        if not all_good:
            sys.exit(1)
        "

  build:
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security analysis
      uses: github/super-linter@v4
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_PYTHON_BLACK: false  # We handle this separately
        VALIDATE_PYTHON_FLAKE8: false  # We handle this separately
        VALIDATE_PYTHON_MYPY: false    # We handle this separately

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .
        
    - name: Run performance tests
      run: |
        # Run specific performance-critical tests
        pytest tests/ -m "not slow" --durations=10
        
    - name: Memory usage check
      run: |
        # Basic memory usage test
        python -c "
        import sys
        sys.path.insert(0, 'src')
        
        from sclu.strategies import SCLUStrategy
        from sclu.indicators.open_interest import OpenInterestIndicator
        
        # Basic import and instantiation test
        print('✓ All modules imported successfully')
        print('✓ Basic performance check passed')
        "

# Deployment job (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    # Uncomment to enable PyPI deployment
    # - name: Publish to PyPI
    #   if: startsWith(github.ref, 'refs/tags/')
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     user: __token__
    #     password: ${{ secrets.PYPI_API_TOKEN }}
